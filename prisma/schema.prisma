// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./homecam.db"
  shadowDatabaseUrl = "file:./shadow.db"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  
  access_token       String?  
  expires_at         Int?
  refresh_token_expires_in Int?
  token_type         String?
  scope              String?
  id_token           String?  
  session_state      String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  password      String
  isAdmin       Boolean   @default(false)   
  name          String?
  bio           String? 
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
}

model Camera {
  id            Int       @id @default(autoincrement())
  name          String
  camDevId      String
  micDevId      String?
  isRecording   Boolean
  motionEnabled Boolean
  soundType     String
  trf           String
  recordings    Recordings[]
  recConf       RecConf[]
  camOption     CamOption[]
}


//Camera Options supported by each camera, e.g., YUYV 640x480 30f
model CamOption {
  id            String    @id @default(cuid())
  cameraId      Int
  camera        Camera?   @relation(fields: [cameraId], references: [id], onDelete: Cascade)
  trf           String // Type-Resolution-FPS
}

//녹화된 영상 segment들(아마도 ts file)에 대한 모델
model Recordings {
  id            String    @id @default(cuid())
  cameraId      Int?
  camera        Camera?   @relation(fields: [cameraId], references: [id], onDelete: SetNull)
  timeFrom      DateTime
  timeUntil     DateTime
  fileSizeinByte Int
  fileName      String
}

model RecConf {
  id            String    @id @default(cuid())
  cameraId      Int
  camera        Camera?   @relation(fields: [cameraId], references: [id], onDelete: Cascade)
  unlimited     Boolean   @default(true)
  whenToRecord  String
  isEnabled       Boolean   @default(false)
}